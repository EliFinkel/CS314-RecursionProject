  public static int minDifference(int numTeams, int[] abilities) {
        // Initialize team scores and members arrays
        int[] teamScores = new int[numTeams];
        int[] teamMembers = new int[numTeams];
        // Call the recursive helper method
        return helper(abilities, 0, teamScores, teamMembers, Integer.MAX_VALUE, 0);
    }

    // Helper method for recursion
    private static int helper(int[] abilities, int index, int[] teamScores, int[] teamMembers, int minDiff, int filledTeams) {
        // Base case: if all abilities have been assigned
        if (index == abilities.length) {
            // Check if all teams have at least one member
            if (filledTeams == teamScores.length) {
                // Calculate the minimum and maximum team scores
                int minScore = Integer.MAX_VALUE, maxScore = Integer.MIN_VALUE;
                for (int score : teamScores) {
                    minScore = Math.min(minScore, score);
                    maxScore = Math.max(maxScore, score);
                }
                // Update the minimum difference
                return Math.min(minDiff, maxScore - minScore);
            } else {
                // Return maximum value if not all teams have members
                return Integer.MAX_VALUE;
            }
        }

        // Recursive case: try assigning current ability to each team
        int currentMinDiff = Integer.MAX_VALUE;
        for (int i = 0; i < teamScores.length; i++) {
            // Assign ability to team i
            teamScores[i] += abilities[index];
            teamMembers[i]++;
            // Only increment filledTeams if this is the first member being added to the team
            int newFilledTeams = filledTeams + (teamMembers[i] == 1 ? 1 : 0);
            // Recursive call
            int diff = helper(abilities, index + 1, teamScores, teamMembers, minDiff, newFilledTeams);
            // Update the minimum difference
            currentMinDiff = Math.min(currentMinDiff, diff);
            // Backtrack: remove ability from team i
            teamScores[i] -= abilities[index];
            teamMembers[i]--;
        }
        return currentMinDiff;
    }